name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release --bin sologna --bin sink_reader

      - name: Prepare artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist
          cp target/release/sologna dist/sologna
          cp target/release/sink_reader dist/sink_reader
          cp config.toml dist/config.toml
          cp env.example dist/env.example
          tar -C dist -czf sologna-${{ matrix.target }}.tar.gz .

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy target\release\sologna.exe dist\sologna.exe
          copy target\release\sink_reader.exe dist\sink_reader.exe
          copy config.toml dist\config.toml
          copy env.example dist\env.example
          powershell -Command "Compress-Archive -Path dist\* -DestinationPath sologna-${{ matrix.target }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sologna-${{ matrix.target }}
          path: |
            *.tar.gz
            *.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

